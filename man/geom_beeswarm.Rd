% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-beeswarm.R
\name{geom_beeswarm}
\alias{geom_beeswarm}
\title{Points, jittered to reduce overplotting using the beeswarm package}
\usage{
geom_beeswarm(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  ...,
  method = "swarm",
  cex = 1,
  side = 0L,
  priority = "ascending",
  fast = TRUE,
  dodge.width = NULL,
  corral = "none",
  corral.width = 0.9,
  groupOnX = NULL,
  orientation = NULL,
  beeswarmArgs = list(),
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{method}{Method for arranging points.
Options are \code{"swarm"} (default), \code{"compactswarm"}, \code{"square"}, \code{"hex"}, and \code{"center"}.
See Details below.}

\item{cex}{Scaling for adjusting point spacing (see \code{\link[beeswarm:swarmx]{beeswarm::swarmx()}}).
Values between 1 (default) and 3 tend to work best.}

\item{side}{Direction to perform jittering: 0: both directions;
1: to the right or upwards; -1: to the left or downwards.}

\item{priority}{Method used to perform point layout.
Options are \code{"ascending"} (default), \code{"descending"}, \code{"density"}, \code{"random"}, or \code{"none"}.
See Details below.}

\item{fast}{If \code{TRUE} (default), use compiled version of swarm algorithm.
This option is ignored for all methods except \code{"swarm"} and \code{"compactswarm"}.}

\item{dodge.width}{Amount by which points from different aesthetic groups
will be dodged. This requires that one of the aesthetics is a factor.}

\item{corral}{Method used to adjust points that would be placed too wide
horizontally. Options are \code{"none"} (default), \code{"gutter"}, \code{"wrap"}, \code{"random"}, and \code{"omit"}.
See Details below.}

\item{corral.width}{Width of the corral, if not \code{"none"}. Default is \code{0.9}.}

\item{groupOnX}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#superseded}{\figure{lifecycle-superseded.svg}{options: alt='[Superseded]'}}}{\strong{[Superseded]}} See \code{orientation}.}

\item{orientation}{The orientation (i.e., which axis to group on) is inferred from the data.
This can be overridden by setting \code{orientation} to either \code{"x"} or \code{"y"}.}

\item{beeswarmArgs}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} No longer used.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\description{
The beeswarm geom is a convenient means to offset points within categories to
reduce overplotting. Uses the beeswarm package
}
\details{
\strong{method:} specifies the algorithm used to avoid overlapping points. The
default \code{"swarm"} method places points in increasing order. If a point would
overlap with an existing point, it is shifted sideways (along the group axis)
by a minimal amount sufficient to avoid overlap.

While the \code{"swarm"} method places points in a predetermined
order, the \code{"compactswarm"} method uses a greedy strategy to determine which
point will be placed next. This often leads to a more tightly-packed layout.
The strategy is very simple: on each iteration, a point that can be placed as
close as possible to the non-data axis is chosen and placed. If there are two
or more equally good points, \code{priority} is used to break ties.

The other 3 methods first discretise the values along the data axis, in order
to create more efficient packing. The \code{"square"} method places points on a
square grid, whereas \code{"hex"} uses a hexagonal grid. \code{"centre"}/\code{"center"}
uses a square grid to produce a symmetric swarm. The number of break points
for discretisation is determined by a combination of the available plotting
area and the \code{cex} argument.

\strong{priority:} controls the order in which points are placed, which generally
has a noticeable effect on the plot appearance. \code{"ascending"} gives the
'traditional' beeswarm plot. \code{"descending"} is the opposite. \code{"density"}
prioritizes points with higher local density. \code{"random"} places points in a
random order. \code{"none"} places points in the order provided.

\strong{corral:} By default, swarms from different groups are not prevented from
overlapping, i.e. \verb{"corral = "none"}. Thus, datasets that are very large or
unevenly distributed may produce ugly overlapping beeswarms. To control
runaway points one can use the following methods. \code{"gutter"} collects runaway
points along the boundary between groups. \code{"wrap"} implement periodic boundaries.
\code{"random"} places runaway points randomly in the region. \code{"omit"} omits runaway
points.
}
\section{Aesthetics}{

\Sexpr[results=rd,stage=build]{ggplot2:::rd_aesthetics("geom", "point")}
}

\examples{

  ggplot2::qplot(class, hwy, data = ggplot2::mpg, geom='beeswarm')
  # Generate fake data
  distro <- data.frame(
    'variable'=rep(c('runif','rnorm'),each=100),
    'value'=c(runif(100, min=-3, max=3), rnorm(100))
  )
  ggplot2::qplot(variable, value, data = distro, geom='beeswarm')
  ggplot2::ggplot(distro,aes(variable, value)) +
    geom_beeswarm(priority='density',size=2.5)
}
\seealso{
\code{\link[=geom_quasirandom]{geom_quasirandom()}} an alternative method,
\code{\link[beeswarm:swarmx]{beeswarm::swarmx()}} how spacing is determined,
\code{\link[ggplot2:geom_point]{ggplot2::geom_point()}} for regular, unjittered points,
\code{\link[ggplot2:geom_jitter]{ggplot2::geom_jitter()}} for jittered points,
\code{\link[ggplot2:geom_boxplot]{ggplot2::geom_boxplot()}} for another way of looking at the conditional
distribution of a variable
}
